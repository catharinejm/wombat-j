* Analyze phase
** Constants
*** Numbers
*** Strings
*** Characters
*** Boolean
*** e.g. { :op :constant, :id 0, :type :Integer, :value 42, :children [:class :value] } 
** Symbols
*** Attempt to resolve
*** Failure throws an exception
*** e.g. 'foo => { :type :symbol, :name :foo, :owning-scope <expr that defined sym>, :value-expr <expr that defines value>, :children [:name :owning-scope :value-expr] }
** Lambdas
*** Compile during analysis
**** Instance attributes for closed-overs
**** Static attributes for constants?
*** { :type :lambda, :params [:x :y], :closes [...], :statements [<statement exprs>], :return <tail expr>, :parent-scope <expr of parent>, :children [:params :closes :statements :return :parent-scope] }
** Invocation
*** 


ignore the above.


Continuation invocation:

(define doit (lambda (n) (if (< n 50000) (doit2 (add1 n)) n)))
(define doit2 (lambda (n) (doit n)))


Top level: (lambda () (let ((r (doit 0))) r))

{ top; doit }

Invoke: (doit 0)
    ret -> (Continuation. (lambda () (let ((r (doit2 1))) r)))

Top Level:
Invoke: (Continuation. [doit2])

{ top; Cont ; doit2 }

Invoke: (doit2 1)
    ret -> (Continuation. (lambda () (let ((r (doit 1))) r)))

{ top ; Cont ; doit2 }

Invoke: (Continuation (doit 1))
Invoke: (doit 1)
    ret-> (Continuation. (lambda () (let ((r (doit2 2))) r)))

{ top ; doit ; cont ; doit2 ; cont }


